// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package storegen

import (
	"context"
	"database/sql"
	"time"
)

const insertIntoUsers = `-- name: InsertIntoUsers :one
INSERT INTO users (first_name, surname, country_code, phone_number,
                   fiat_wallet_currency, usdc_wallet_address, image_url)
VALUES ($1 :: VARCHAR(255),
        $2 :: VARCHAR(255),
        $3 :: VARCHAR(2),
        $4 :: VARCHAR(20),
        $5 :: VARCHAR(3),
        $6 :: VARCHAR(44),
        $7 :: VARCHAR(255))
RETURNING id
`

type InsertIntoUsersParams struct {
	FirstName          string
	Surname            string
	CountryCode        string
	PhoneNumber        string
	FiatWalletCurrency string
	UsdcWalletAddress  string
	ImageUrl           string
}

func (q *Queries) InsertIntoUsers(ctx context.Context, arg InsertIntoUsersParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertIntoUsers,
		arg.FirstName,
		arg.Surname,
		arg.CountryCode,
		arg.PhoneNumber,
		arg.FiatWalletCurrency,
		arg.UsdcWalletAddress,
		arg.ImageUrl,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const lookupUserByID = `-- name: LookupUserByID :one
SELECT id,
       created_at,
       updated_at,
       first_name,
       surname,
       country_code,
       phone_number,
       fiat_wallet_currency,
       usdc_wallet_address,
       image_url
FROM users
WHERE id = $1 :: INT
`

type LookupUserByIDRow struct {
	ID                 int32
	CreatedAt          time.Time
	UpdatedAt          time.Time
	FirstName          string
	Surname            string
	CountryCode        string
	PhoneNumber        string
	FiatWalletCurrency string
	UsdcWalletAddress  sql.NullString
	ImageUrl           sql.NullString
}

func (q *Queries) LookupUserByID(ctx context.Context, id int32) (LookupUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, lookupUserByID, id)
	var i LookupUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.Surname,
		&i.CountryCode,
		&i.PhoneNumber,
		&i.FiatWalletCurrency,
		&i.UsdcWalletAddress,
		&i.ImageUrl,
	)
	return i, err
}

const lookupUserByName = `-- name: LookupUserByName :one
SELECT id,
       created_at,
       updated_at,
       first_name,
       surname,
       country_code,
       phone_number,
       fiat_wallet_currency,
       usdc_wallet_address,
       image_url
FROM users
WHERE first_name = $1 :: VARCHAR(255)
  AND surname = $2 :: VARCHAR(255)
`

type LookupUserByNameParams struct {
	FirstName string
	Surname   string
}

type LookupUserByNameRow struct {
	ID                 int32
	CreatedAt          time.Time
	UpdatedAt          time.Time
	FirstName          string
	Surname            string
	CountryCode        string
	PhoneNumber        string
	FiatWalletCurrency string
	UsdcWalletAddress  sql.NullString
	ImageUrl           sql.NullString
}

func (q *Queries) LookupUserByName(ctx context.Context, arg LookupUserByNameParams) (LookupUserByNameRow, error) {
	row := q.db.QueryRowContext(ctx, lookupUserByName, arg.FirstName, arg.Surname)
	var i LookupUserByNameRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.Surname,
		&i.CountryCode,
		&i.PhoneNumber,
		&i.FiatWalletCurrency,
		&i.UsdcWalletAddress,
		&i.ImageUrl,
	)
	return i, err
}

const lookupUserByPhoneNumber = `-- name: LookupUserByPhoneNumber :one
SELECT id,
       created_at,
       updated_at,
       first_name,
       surname,
       country_code,
       phone_number,
       fiat_wallet_currency,
       usdc_wallet_address,
       image_url
FROM users
WHERE phone_number = $1 :: VARCHAR(20)
`

type LookupUserByPhoneNumberRow struct {
	ID                 int32
	CreatedAt          time.Time
	UpdatedAt          time.Time
	FirstName          string
	Surname            string
	CountryCode        string
	PhoneNumber        string
	FiatWalletCurrency string
	UsdcWalletAddress  sql.NullString
	ImageUrl           sql.NullString
}

func (q *Queries) LookupUserByPhoneNumber(ctx context.Context, phoneNumber string) (LookupUserByPhoneNumberRow, error) {
	row := q.db.QueryRowContext(ctx, lookupUserByPhoneNumber, phoneNumber)
	var i LookupUserByPhoneNumberRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.Surname,
		&i.CountryCode,
		&i.PhoneNumber,
		&i.FiatWalletCurrency,
		&i.UsdcWalletAddress,
		&i.ImageUrl,
	)
	return i, err
}

const lookupUserByUSDCWallet = `-- name: LookupUserByUSDCWallet :one
SELECT id,
       created_at,
       updated_at,
       first_name,
       surname,
       country_code,
       phone_number,
       fiat_wallet_currency,
       usdc_wallet_address,
       image_url
FROM users
WHERE usdc_wallet_address = $1 :: VARCHAR(44)
`

type LookupUserByUSDCWalletRow struct {
	ID                 int32
	CreatedAt          time.Time
	UpdatedAt          time.Time
	FirstName          string
	Surname            string
	CountryCode        string
	PhoneNumber        string
	FiatWalletCurrency string
	UsdcWalletAddress  sql.NullString
	ImageUrl           sql.NullString
}

func (q *Queries) LookupUserByUSDCWallet(ctx context.Context, usdcWalletAddress string) (LookupUserByUSDCWalletRow, error) {
	row := q.db.QueryRowContext(ctx, lookupUserByUSDCWallet, usdcWalletAddress)
	var i LookupUserByUSDCWalletRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.Surname,
		&i.CountryCode,
		&i.PhoneNumber,
		&i.FiatWalletCurrency,
		&i.UsdcWalletAddress,
		&i.ImageUrl,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET updated_at           = CURRENT_TIMESTAMP AT TIME ZONE 'UTC',
    first_name           = COALESCE($1, first_name),
    surname              = COALESCE($2, surname),
    phone_number         = COALESCE($3, phone_number),
    fiat_wallet_currency = COALESCE($4, fiat_wallet_currency),
    usdc_wallet_address  = COALESCE($5, usdc_wallet_address),
    image_url            = COALESCE($6, image_url)
WHERE id = $7 :: INT
RETURNING id
`

type UpdateUserParams struct {
	FirstName          string
	Surname            string
	PhoneNumber        string
	FiatWalletCurrency string
	UsdcWalletAddress  sql.NullString
	ImageUrl           sql.NullString
	ID                 int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.Surname,
		arg.PhoneNumber,
		arg.FiatWalletCurrency,
		arg.UsdcWalletAddress,
		arg.ImageUrl,
		arg.ID,
	)
	return err
}
